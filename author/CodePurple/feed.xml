<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="https://jskim1215.github.io/author/CodePurple/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://jskim1215.github.io/" rel="alternate" type="text/html" />
  <updated>2021-08-14T22:14:33+09:00</updated>
  <id>https://jskim1215.github.io/author/CodePurple/feed.xml</id>

  
  
  

  
    <title type="html">우당탕 프로덕트 개발 여정 | </title>
  

  
    <subtitle>우당탕 프로덕트 개발 여정</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">글 형식 블로그의 가독성에 관하여</title>
      <link href="https://jskim1215.github.io/diary-2" rel="alternate" type="text/html" title="글 형식 블로그의 가독성에 관하여" />
      <published>2021-08-12T22:01:01+09:00</published>
      <updated>2021-08-12T22:01:01+09:00</updated>
      <id>https://jskim1215.github.io/diary-2</id>
      <content type="html" xml:base="https://jskim1215.github.io/diary-2">&lt;h2 id=&quot;글의-한계&quot;&gt;글의 한계&lt;/h2&gt;

&lt;p&gt;개인적으로 독자의 관점에서 블로그를 읽어봤을 때, 일단 줄 글 형식의 현재 내 블로그는 가치가 거의 제로에 가깝다고 생각한다. 첫번째로 내가 글을 가독성이 좋게 쓰는 편이라기 보다는 그냥 단순히 내 생각을 나열하는 정도의 블로그라는 점 때문에 그렇게 생각한다. 그래서 현재 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;12개&lt;/code&gt;의 포스팅이 올라가 있는데 이제부터라도 변화를 가져가야한다고 생각한다.&lt;/p&gt;

&lt;h2 id=&quot;나라도-읽을만하려면&quot;&gt;나라도 읽을만하려면?&lt;/h2&gt;

&lt;p&gt;일단 이쁘게 문법을 정리하는 방향은 기존의 대체제가 존재하니까 패스한다. 그럼 내가 생각하기엔 아래 첨언이나 코드 예시 같은 것을 적어놓고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;필기한 내용&lt;/code&gt;으로 블로그를 가져가는 게 맞다고 생각한다. 여기서 사진의 문제는 딱 하나 존재한다. 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;사진의 크기&lt;/code&gt;다. 일단 버튼을 통해 이미지를 풀스크린 슬라이드 쇼로 보여줄 수 있다면 좋을 거 같다. 커스터마이징이 가능한지 빠르게 찾아봐야겠다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;컨텐츠 적인 측면으로 봤을 때, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Study Part&lt;/code&gt;는 매번 헷갈리는 부분들을 매뉴얼 적으로 이런 느낌이다 해석한 내용들을 나열하는 방식으로 진행할 예정이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Project Part&lt;/code&gt;는 유튜브 외전 혹은 유튜브 자료 창고 느낌으로 가져가 볼 생각이다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Diary Part&lt;/code&gt;는 지금처럼 가져가도 큰 문제는 없을 것 같다.&lt;/p&gt;

&lt;h2 id=&quot;현재-아이디어&quot;&gt;현재 아이디어&lt;/h2&gt;

&lt;p&gt;포스팅 페이지 기준 제목까지 윗 부분은 그대로 둘 예정이다. 제목 아래 바로 센터에 풀 스크린 슬라이드 쇼 버튼을 두고 화면 전환이 가능하게&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>CodePurple</name>
        
        
      </author>

      

      
        <category term="diary" />
      

      
        <summary type="html">글의 한계</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">투두리스트 Chrome Extension (4) - JS to React</title>
      <link href="https://jskim1215.github.io/project-2-4" rel="alternate" type="text/html" title="투두리스트 Chrome Extension (4) - JS to React" />
      <published>2021-08-12T13:01:06+09:00</published>
      <updated>2021-08-12T13:01:06+09:00</updated>
      <id>https://jskim1215.github.io/project-2-4</id>
      <content type="html" xml:base="https://jskim1215.github.io/project-2-4">&lt;p&gt;테스트&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>CodePurple</name>
        
        
      </author>

      

      
        <category term="project" />
      

      
        <summary type="html">테스트</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">트위터 클론 코딩 (2) - React Review</title>
      <link href="https://jskim1215.github.io/study-3-2" rel="alternate" type="text/html" title="트위터 클론 코딩 (2) - React Review" />
      <published>2021-08-12T13:01:01+09:00</published>
      <updated>2021-08-12T13:01:01+09:00</updated>
      <id>https://jskim1215.github.io/study-3-2</id>
      <content type="html" xml:base="https://jskim1215.github.io/study-3-2">&lt;p&gt;테스트??&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getNweets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dbNweets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;dbService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;nweets&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dbNweets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nweetObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setNweets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;nweetObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;getNweets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;dbService&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;collection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;nweets&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;onSnapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;something happen&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},[])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content>

      
      
      
      
      

      <author>
          <name>CodePurple</name>
        
        
      </author>

      

      
        <category term="study" />
      

      
        <summary type="html">테스트??</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">트위터 클론 코딩 (1) - FireBase란?</title>
      <link href="https://jskim1215.github.io/study-3-1" rel="alternate" type="text/html" title="트위터 클론 코딩 (1) - FireBase란?" />
      <published>2021-08-12T12:01:01+09:00</published>
      <updated>2021-08-12T12:01:01+09:00</updated>
      <id>https://jskim1215.github.io/study-3-1</id>
      <content type="html" xml:base="https://jskim1215.github.io/study-3-1">&lt;p&gt;나는 창업을 하고 싶었지 프로그래밍을 배우고 싶지는 않았다. 하지만 당신이 가진 리소스가 충분하지 않다면 시간을 좀만 투자해서 당장 서비스를 런칭할 수 있는 방법 중 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FireBase&lt;/code&gt;는 최고의 선택이라고 생각한다.&lt;!--break--&gt;
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;firebase란&quot;&gt;FireBase란?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FireBase&lt;/code&gt;는 백엔드 프로그램이라고 말할 수 있다. 그렇기 때문에 백엔드에 대한 큰 공부 없이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;로그인 기능&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;데이터베이스&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;저장공간&lt;/code&gt;을 사용할 수 있다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 이렇게 쉽게 사용할 수 있기 때문에 앞서 내가 서비스를 런칭해서 사용자의 피드백을 듣는 정도로 사용할 수 있는 것이다. 이후에 서비스를 계속해서 유지하는데 있어서 직접 서버를 운영해야하는 것은 틀림없다. 말그대로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;아이디어를 테스트&lt;/code&gt;하는 정도로 사용해야한다는 것이다.&lt;/p&gt;

&lt;h2 id=&quot;firebase-사용하는-방법&quot;&gt;FireBase 사용하는 방법&lt;/h2&gt;
&lt;p&gt;수업을 듣거나 이 블로그를 보는 경우, 다음의 과정을 통해 기본 세팅을 해주면 된다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React Application 세팅하기&lt;/code&gt;
    &lt;ol&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npx create-react-app &quot;folder&quot;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;u&gt;index.js&lt;/u&gt; / &lt;u&gt;App.js&lt;/u&gt;빼고 정리하기&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;FireBase 연결하기
    &lt;ol&gt;
      &lt;li&gt;&lt;a href=&quot;https://firebase.google.com/&quot;&gt;FireBase 페이지&lt;/a&gt; 접속하기&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm install --save firebase&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;u&gt;fbase.js&lt;/u&gt; 파일 생성하고 아래 코드 입력하기 (index.js 파일 있는 위치)
        &lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;firebase/app&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;firebaseConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;apiKey&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;authDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;projectId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;storageBucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;messagingSenderId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;appId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;firebase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initializeApp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;firebaseConfig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;router-setup&quot;&gt;Router Setup&lt;/h2&gt;
&lt;p&gt;이 과정은 전체적인 서비스의 뼈대를 구축하는 과정이라고 생각하면 된다. 기획을 하는 입장이라면 스토리보드 같은 것이다. 
다른 비유를 하자면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;코딩&lt;/code&gt;이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;구슬 꿰기 과정&lt;/code&gt;라면 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router Setup&lt;/code&gt;은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;구슬과 실을 소분&lt;/code&gt;하는 과정이다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;트위터 클론코딩에 있어 크게 4가지 페이지를 구축할 예정이다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Auth&lt;/li&gt;
  &lt;li&gt;Home&lt;/li&gt;
  &lt;li&gt;Profile&lt;/li&gt;
  &lt;li&gt;EditProfile&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router&lt;/code&gt;에 대해 잘 모른다면 &lt;a href=&quot;&quot;&gt;React로 웹 앱 만들기&lt;/a&gt;를 먼저 공부하고 진행해야한다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>CodePurple</name>
        
        
      </author>

      

      
        <category term="study" />
      

      
        <summary type="html">나는 창업을 하고 싶었지 프로그래밍을 배우고 싶지는 않았다. 하지만 당신이 가진 리소스가 충분하지 않다면 시간을 좀만 투자해서 당장 서비스를 런칭할 수 있는 방법 중 FireBase는 최고의 선택이라고 생각한다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">실전형 React Hooks 10개 (3) - UseRef</title>
      <link href="https://jskim1215.github.io/study-2-3" rel="alternate" type="text/html" title="실전형 React Hooks 10개 (3) - UseRef" />
      <published>2021-08-08T12:01:04+09:00</published>
      <updated>2021-08-08T12:01:04+09:00</updated>
      <id>https://jskim1215.github.io/study-2-3</id>
      <content type="html" xml:base="https://jskim1215.github.io/study-2-3">&lt;h2 id=&quot;useref란&quot;&gt;useRef란?&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useRef&lt;/code&gt;는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;querySelector&lt;/code&gt; 또는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getElementById&lt;/code&gt; 처럼 HTML element를 catch하는데 사용하는 느낌이다. &lt;!--break--&gt;&lt;/p&gt;

&lt;p&gt;사실 프로젝트를 진행하면서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useRef&lt;/code&gt;를 사용해보지는 않아서 잘 모르는 부분이 있다. 여기 부분과 관련해서는 코드 예시를 하나 보면서 진행하겠다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;우클릭 후 새탭에서 이미지 열기&lt;/code&gt; 하면 보기 쉽다.
&lt;img src=&quot;https://user-images.githubusercontent.com/73425926/129316318-333bb1b6-67b2-4fd0-8a7d-158fc3cfab49.jpg&quot; alt=&quot;p-useref-1&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Element&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Hook Function&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 세 개의 코드를 통해 HTML Element 중 내가 원하는 element를 불러온다. 간단하게 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useClick&lt;/code&gt; 함수가 실행되면서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useRef()&lt;/code&gt;를 통해 element를 불러오고 그 다음에 함수 처리를 한다음 element를 돌려준다. HTML Code에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useClick()&lt;/code&gt;을 통해 element를 함수 처리한다. &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;사실 적으면서도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useRef()&lt;/code&gt;의 감 정도 잡은 것 같다. 실제 코드에 적용하는 것과는 아예 다르니 한 번 queryselector를 적용했던 코드들을 바꿔보는 것이 좋을 것 같다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>CodePurple</name>
        
        
      </author>

      

      
        <category term="study" />
      

      
        <summary type="html">useRef란? useRef는 querySelector 또는 getElementById 처럼 HTML element를 catch하는데 사용하는 느낌이다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">실전형 React Hooks 10개 (2) - UseEffect</title>
      <link href="https://jskim1215.github.io/study-2-2" rel="alternate" type="text/html" title="실전형 React Hooks 10개 (2) - UseEffect" />
      <published>2021-08-08T11:01:01+09:00</published>
      <updated>2021-08-08T11:01:01+09:00</updated>
      <id>https://jskim1215.github.io/study-2-2</id>
      <content type="html" xml:base="https://jskim1215.github.io/study-2-2">&lt;h2 id=&quot;useeffect란&quot;&gt;UseEffect란?&lt;/h2&gt;
&lt;p&gt;useEffect는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;function, dependency&lt;/code&gt;라는 두 개의 변수를 받는다. 여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dependency&lt;/code&gt;라는 변수는 말 그대로 해당 element에 변화가 발생하면 function을 발생시키는 친구라고 생각하면 된다.
&lt;!--break--&gt;&lt;/p&gt;

&lt;p&gt;그래서 보통 useEffect(function, [dependency]) 이런 형태로 사용된다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;주의할 점&lt;/code&gt;은 빈 array []의 경우 한 번만 실행되고 어떤 변화에도 재실행되지 않는 경우에 사용한다.&lt;/p&gt;

&lt;h2 id=&quot;사용-예시&quot;&gt;사용 예시&lt;/h2&gt;
&lt;h3 id=&quot;usetitle&quot;&gt;useTitle&lt;/h3&gt;
&lt;p&gt;구현 기능 : 웹페이지의 title을 변경하는 기능&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;updateTitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;htmlTitle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;htmlTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;updateTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;titleUpdater&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useTitle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Loading...&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;titleUpdater&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Home&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;코드 설명&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;useTitle 함수에서 받는 string이 initialTitle&lt;/li&gt;
  &lt;li&gt;updateTitle이 웹의 title 수정&lt;/li&gt;
  &lt;li&gt;titleUpdater에서 useTitle의 initialTitle에 “Loading” 전달&lt;/li&gt;
  &lt;li&gt;titleUpdater에서 5초 후에 “Home” 전달&lt;/li&gt;
  &lt;li&gt;useTitle 함수에서 전달받은 initialTitle이 “Home”이 됬으니까 title이 바뀐 상황&lt;/li&gt;
  &lt;li&gt;useEffect 함수 실행&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;usescroll&quot;&gt;useScroll&lt;/h3&gt;
&lt;p&gt;구현 기능 : scroll이 발생했을 때, 특정 범위를 만족하면 함수 실행&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useScroll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;scrollY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenX&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;useEffect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;removeEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scroll&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onScroll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;코드 설명&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;window.scrollY를 통해 y 좌표값 측정 후 업데이트&lt;/li&gt;
  &lt;li&gt;addEventListener를 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;scroll&lt;/code&gt; 이벤트 탐지 후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onScroll&lt;/code&gt; 함수 실행&lt;/li&gt;
  &lt;li&gt;return을 통해 뒷정리&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;사실 나는 여기서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3번&lt;/code&gt; 파트가 잘 이해가 되지는 않는다. component가 나타날때 useEffect가 실행되고 이후에 component가 사라질 때, clean-up 함수가( return에 들어가 있는 함수) 실행된다고 한다. 이 과정을 통해 불필요한 리소스 사용을 줄여 사이트 운용에 도움을 준다고 글을 읽은 적이 있으나 아직 그정도 규모의 프로젝트가 아니라서 그런지 체감이 크게 되지는 않는다. 하지만 이 부분에 대해 인지는 하고 있어야하니까 알아두면 좋을 것 같다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>CodePurple</name>
        
        
      </author>

      

      
        <category term="study" />
      

      
        <summary type="html">UseEffect란? useEffect는 function, dependency라는 두 개의 변수를 받는다. 여기서 dependency라는 변수는 말 그대로 해당 element에 변화가 발생하면 function을 발생시키는 친구라고 생각하면 된다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">실전형 React Hooks 10개 (1) - UseState</title>
      <link href="https://jskim1215.github.io/study-2-1" rel="alternate" type="text/html" title="실전형 React Hooks 10개 (1) - UseState" />
      <published>2021-08-08T10:01:01+09:00</published>
      <updated>2021-08-08T10:01:01+09:00</updated>
      <id>https://jskim1215.github.io/study-2-1</id>
      <content type="html" xml:base="https://jskim1215.github.io/study-2-1">&lt;h2 id=&quot;react에서-동적인-데이터를-관리하는-법&quot;&gt;React에서 동적인 데이터를 관리하는 법&lt;/h2&gt;

&lt;p&gt;지금까지 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;class component&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state&lt;/code&gt; 그리고 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setState&lt;/code&gt;를 통해 데이터를 관리했다. &lt;!--break--&gt;&lt;/p&gt;

&lt;p&gt;하지만 React에서 더 쉽게 동적인 데이터를 관리하는 방법이 있다. 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useState&lt;/code&gt;라는 함수이다.&lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Without useState&lt;/code&gt; = 29 lines&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;AppAgly&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Number&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;!-- ```javascript
class AppAgly extends React.component {
  state = {
    item: 0,
  };
  render() {
    const { item } = this.state;
    return (
      &lt;div className=&quot;App&quot;&gt;
        &lt;h1&gt;Number of item is {item}&lt;/h1&gt;
        &lt;button onClick={IncrementElement}&gt;Increment&lt;/button&gt;
        &lt;button onClick={DecrementElement}&gt;Decrement&lt;/button&gt;
      &lt;/div&gt;
    );
  }
  IncrementElement = () =&gt; {
    this.setState((state) =&gt; {
      return {
        item: state.item + 1,
      };
    });
  };
  DecrementElement = () =&gt; {
    this.setState((state) =&gt; {
      return {
        item: state.item -1 1,
      };
    });
  };
}
``` --&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;With useState&lt;/code&gt; = 14 lines&lt;/p&gt;

&lt;!-- ```javascript
import { useState } from &quot;react&quot;;

const App = () =&gt; {
  const [item, setItem] = useState(1);
  const Increment = setItem(item + 1);
  const Decrement = setItem(item - 1);
  return (
    &lt;div className=&quot;App&quot;&gt;
      &lt;h1&gt;Number of item is {item}&lt;/h1&gt;
      &lt;button onClick={IncrementElement}&gt;Increment&lt;/button&gt;
      &lt;button onClick={DecrementElement}&gt;Decrement&lt;/button&gt;
    &lt;/div&gt;
  );
};
``` --&gt;

&lt;p&gt;단순하게 코드 생김새만 봐도 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useState&lt;/code&gt; 함수의 편의성에 대해 인지할 수 있다. 아래 추가적으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useState&lt;/code&gt;를 활용한 Hooks 몇 개를 소개하며 글을 마무리하겠다.&lt;/p&gt;

&lt;h3 id=&quot;useinput&quot;&gt;useInput&lt;/h3&gt;

&lt;p&gt;구현 기능 : Input에 대해 조건 부여하기&lt;/p&gt;

&lt;!-- ```javascript
const useInput = (initialValue, validator) =&gt; {
  const [value, setValue] = useState(initialValue);
  const onChange = (event) =&gt; {
    const {
      target: { value },
    } = event;
    let willUpdate = true;
    if (typeof validator === &quot;function&quot;) {
      willUpdate = validator(value);
    }
    if (willUpdate) {
      setValue(value);
    }
  };
  return { value, onChange };
};
``` --&gt;

&lt;p&gt;코드 진행 순서&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;willUpdate를 통해 해당 value가 validator를 통해 필터링&lt;/li&gt;
  &lt;li&gt;validator의 조건을 만족할 경우 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setValue&lt;/code&gt; 함수를 통해 value 수정&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;usetabs&quot;&gt;useTabs&lt;/h3&gt;

&lt;p&gt;구현 기능 : 새로운 정보 가져오고 보여주기&lt;/p&gt;

&lt;!--
```javascript
const useTabs = (initialTab, allTabs) =&gt; {
  if (!allTaabs || Array.isArray(allTabs)) {
    return;
  }
  const [currentIndex, setCurrentIndex] = useState(initialTab);
  return {
    currentItem: allTabs[currentIndex],
    changeItem: setCurrentIndex,
  };
};
``` --&gt;

&lt;p&gt;코드 설명&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;allTabs를 1차적으로 if문을 통해 filtering&lt;/li&gt;
  &lt;li&gt;event가 일어나면 setCurrentIndex를 통해 Tab에 변화 제공&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>CodePurple</name>
        
        
      </author>

      

      
        <category term="study" />
      

      
        <summary type="html">React에서 동적인 데이터를 관리하는 법</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">개발 블로그를 시작하려는 여러분들께</title>
      <link href="https://jskim1215.github.io/diary-1" rel="alternate" type="text/html" title="개발 블로그를 시작하려는 여러분들께" />
      <published>2021-08-07T10:01:01+09:00</published>
      <updated>2021-08-07T10:01:01+09:00</updated>
      <id>https://jskim1215.github.io/diary-1</id>
      <content type="html" xml:base="https://jskim1215.github.io/diary-1">&lt;h2 id=&quot;나의-블로그-경험&quot;&gt;나의 블로그 경험&lt;/h2&gt;
&lt;p&gt;깃허브 페이지 + Jekyll을 활용해서 블로그를 처음 만들어 본 것은 아니였어요.
과거에도 비슷한 목적을 가지고 블로그를 작성하려고 했었던 적이 있었는데 지금처럼 프로그래밍을 학습하면서 나의 학습기록을 기록하고 정리하는 용도로 사용하려 했었죠.
&lt;!--break--&gt;&lt;/p&gt;

&lt;p&gt;그 과정에서 나는 계속해서 반복되는 실수를 저질렀어요. 물론 미래에 본다면 지금도 그 실수의 한 장면일 수도 있지만
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;생각의 방향과 행동의 방향의 비동기화&lt;/code&gt; 이게 바로 내가 저질렀던 실수이에요. 나의 표현이라서 제대로 전달이 안될 수 있어 간단하게 풀어 설명해볼께요.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;예를 들어, 내가 블로그를 작성하려고 했던 이유는 이것이 나의 성장 포트폴리오이자 나를 알릴 수 있는 하나의 채널이 될 수 있기를 기대했기 때문이에요. 여기까지가 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;생각의 방향성&lt;/code&gt;.
이후 나는 블로그 플랫폼을 찾아보기 시작하는데 여기가 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;행동의 방향성&lt;/code&gt;이 시작하는 지점이에요. 그 과정에서 나는 블로그를 개발하는 과정에서 내 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;생각의 방향성&lt;/code&gt;과 계속해서 멀어져가죠.
마치 기획자와 개발자가 소통하지 않고 제품을 개발해서 문제가 생기는 것처럼 혼자 두 가지 일을 담당하다보니 이 과정에서 계속해서 문제가 생겼어요.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;이렇기 때문에 최초의 기획이 가장 중요하고 이후 이 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;생각의 방향성&lt;/code&gt;을 계속해서 리마인드하면서 가지고 가는 것이 나는 혼자서 블로그를 운영하는 과정에 있어서 가장 중요하다고 생각합니다.&lt;/p&gt;

&lt;h2 id=&quot;나만의-블로그-기획법&quot;&gt;나만의 블로그 기획법&lt;/h2&gt;
&lt;p&gt;그래서 내가 어떻게 이번에 블로그를 새로 제작하면서 기획을 했는지 과정을 간략하게 이야기해볼께요. 순서대로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;컨텐츠, 카테고리, 그리고 블로그 디자인&lt;/code&gt; 순서로 써볼께요.&lt;/p&gt;
&lt;h3 id=&quot;컨텐츠-기획&quot;&gt;컨텐츠 기획&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TIL&lt;/code&gt;이라는 표현을 들어보셨나요? &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Today I Learn&lt;/code&gt;의 약자로 내가 오늘 배운 내용에 대해 간단하게 리뷰하면서 지식을 제대로 소화할 수 있도록 도울 수 있는 하나의 방법이죠.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;하지만 제 생각에는 이런 내용의 컨텐츠는 너무 많고 지금 처음 내가 배운 내용을 정리했을 때, 학습자료로써 가지는 가치가 부족하다고 생각했어요.
그래서 나만이 가지고 있는 장점이라고 할만한 부분이 바로 나는 진짜 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;학습자의 포지션&lt;/code&gt;으로 학습 사이트를 조금 더 생생하게 리뷰할 수 있다고 생각했어요.
대표적으로 필수교육과정의 수학과의 비유 혹은 현실적인 적용 사례를 통해 조금 더 나은 포지션을 가지고 갈 수 있다고 생각했어요.&lt;/p&gt;
&lt;h3 id=&quot;카테고리&quot;&gt;카테고리&lt;/h3&gt;
&lt;p&gt;컨텐츠를 미리 기획해야하는 이유가 바로 카테고리를 정하기 쉽기 때문이에요. 카테고리가 왜 중요하냐라고하면 블로그 컨텐츠의 계층을 설정함으로 인해서 독자들로 하여금 더 보기 쉽게 해줄 수 있기 때문이에요. 제 케이스에서는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;학습&lt;/code&gt; 그리고 여기서 이어져서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;프로젝트&lt;/code&gt; 마지막으로 지금처럼 두 분류로 구분하기 어려운 나의 생각이나 아이디어들을 쓸 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;다이어리&lt;/code&gt; 이렇게 3가지로 분류했습니다.&lt;/p&gt;

&lt;h3 id=&quot;블로그-디자인&quot;&gt;블로그 디자인&lt;/h3&gt;
&lt;p&gt;사실 블로그를 시작하면 특히 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;깃허브 페이지&lt;/code&gt;로 시작함면 jekyll theme 찾는 과정에서 이게 이쁘네 저게 이쁘네 생각을 많이하게 되요. 근데 이 과정에서 간단하게 2가지 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Jekyll Theme&lt;/code&gt;을 추천드릴께요.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;minimal mistakes &lt;br /&gt; 일단 이 친구 같은 경우에는 Document가 굉장히 잘 되있고 한국어 사용자들도 꽤 있어서 사용하는데 큰 어려움은 없어요.&lt;/li&gt;
  &lt;li&gt;Jasper2 &lt;br /&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ghost&lt;/code&gt;라는 블로그 플랫폼의 디자인과 동일한 디자인 레이아웃을 가지고 있어서 일단 검증된 디자인이지만 사용하는데 조금 걸릴 수도 있어요. 하지만 잘 설명된 블로그가 한 군데 존재해서 여기를 보고 따라해보시면 큰 어려움은 없을 거에요. &lt;a href=&quot;https://moon9342.github.io/jekyll-start&quot;&gt;해당 블로그 링크&lt;/a&gt; 참고하시면 됩니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;블로그를-시작하려는-여러분들에게&quot;&gt;블로그를 시작하려는 여러분들에게&lt;/h2&gt;
&lt;p&gt;사실 비전공자든 전공자든 지금 세상에 가장 좋다고는 할 수 없지만 일단 가장 간단한 자기 PR 플랫폼으로써는 블로그가 괜찮은 것 같습니다. 
앞서 말씀드린 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;생각의 방향성&lt;/code&gt; 이게 가장 중요하다고 생각합니다. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;첫 단추를 잘못 끼우면&lt;/code&gt; 앞으로 단추들을 끼우는 데 어려운 것처럼 내가 왜 블로그를 작성하려는지 생각해보고 컨텐츠, 카테고리, 디자인 순서대로 진행해보시면 생각보다 괜찮은 블로그를 만들어 나갈 수 있다고 생각합니다.
&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;물론 위에 적은 모든 글자를 이해하는 것보다 지금 당장 컴퓨터 앞으로 가서 블로그 제작에 부리박으면서 몸으로 맞아가며 시작하는 게 제일 먼저해야할 일이에요.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>CodePurple</name>
        
        
      </author>

      

      
        <category term="diary" />
      

      
        <summary type="html">나의 블로그 경험 깃허브 페이지 + Jekyll을 활용해서 블로그를 처음 만들어 본 것은 아니였어요. 과거에도 비슷한 목적을 가지고 블로그를 작성하려고 했었던 적이 있었는데 지금처럼 프로그래밍을 학습하면서 나의 학습기록을 기록하고 정리하는 용도로 사용하려 했었죠.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">React로 웹 앱 만들기 (1) - React란?</title>
      <link href="https://jskim1215.github.io/study-4-1" rel="alternate" type="text/html" title="React로 웹 앱 만들기 (1) - React란?" />
      <published>2021-08-06T12:01:01+09:00</published>
      <updated>2021-08-06T12:01:01+09:00</updated>
      <id>https://jskim1215.github.io/study-4-1</id>
      <content type="html" xml:base="https://jskim1215.github.io/study-4-1">&lt;h2 id=&quot;내가-느낀-react&quot;&gt;내가 느낀 React&lt;/h2&gt;
&lt;p&gt;Javascript 수업에서 가장 크게 변화한 부분은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.html&lt;/code&gt; 파일에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;index.js&lt;/code&gt; 파일로 변화했다는 점이다. &lt;!--break--&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;언어&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Javascript&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;React&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;파일&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;index.html&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;index.js&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;연결&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;script&amp;gt;&amp;lt;/script&lt;/code&gt; 사용&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;component&lt;/code&gt; 사용 &lt;br /&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Router&lt;/code&gt; 사용&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;react-dom&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;components/App&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;ReactDOM&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;StrictMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 여기가 componet // 이전에 HTML과 JS 파일을 연동하는데는 &amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;{&quot; &quot;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;가&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;사용됬었음&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/React.StrictMode&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,
&lt;/span&gt;  &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;u&gt;index.js&lt;/u&gt; 파일에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;App /&amp;gt;&lt;/code&gt;으로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;component&lt;/code&gt;를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render&lt;/code&gt;하는 구조로 변화한거를 볼 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;props&quot;&gt;Props&lt;/h2&gt;

&lt;p&gt;Component의 실행 순서가 되면 component와 함께 전달되는 정보들을 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;props&lt;/code&gt;라고 한다. &lt;br /&gt;
이때, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PropTypes&lt;/code&gt;를 통해 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;props&lt;/code&gt;들이 원하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data Type&lt;/code&gt;으로 전달됬는지 확인할 수 있다.&lt;/p&gt;

&lt;h2 id=&quot;state&quot;&gt;State&lt;/h2&gt;

&lt;p&gt;변화하는 데이터를 사용하기 위해 사용하는 것이라고 생각한다. &lt;u&gt;App.js&lt;/u&gt; 파일에서 class component를 통해 사용한다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;component&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;minus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;The&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;minus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Minus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;위 예시는 버튼을 누르면 자동적으로 화면의 숫자가 변화하는 기능을 구현해놓은 코드다.&lt;/p&gt;

&lt;h2 id=&quot;life-cycle-method&quot;&gt;Life Cycle Method&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Mounting &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;/code&gt;가 생성되는 것을 이야기한다. 프로그램의 진행 순서를 이해하면 편하다.
    &lt;ul&gt;
      &lt;li&gt;class를 생성하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;constructor&lt;/code&gt;가 제일 먼저 실행&lt;/li&gt;
      &lt;li&gt;이후 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;React&lt;/code&gt;의  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;render&lt;/code&gt; 실행. 이때, component가 만들어짐 &lt;br /&gt; 
이걸 바로 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;componentDidMount&lt;/code&gt;를 통해 확인할 수 있다. &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setState&lt;/code&gt; 함수가 실행 됬을 경우에는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;componentDidUpdate&lt;/code&gt;가 실행된다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Unmounting &lt;br /&gt;
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Component&lt;/code&gt;가 죽는 것을 이야기한다. 아직 정확히 어떤 느낌인지 파악하지는 못했다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;추가로&quot;&gt;추가로&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;map()&lt;/code&gt;이라는 함수가 있다.&lt;/p&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Array의 각각 element에 대해 function을 반복해서 실행한다. 반복문에 대한 느낌만 가지고 있다면 쉽게 응용할 수 있다. 가끔 Array안에 Object가 있는 경우, 헷갈리기는 한다.&lt;/p&gt;

&lt;h2 id=&quot;자세한-것은&quot;&gt;자세한 것은…&lt;/h2&gt;
&lt;p&gt;다음 내용들은 노마드코더 무료강의 중 &lt;a href=&quot;https://nomadcoders.co/courses&quot;&gt;React로 웹 앱 만들기&lt;/a&gt;를 듣고 정리한 내용입니다.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>CodePurple</name>
        
        
      </author>

      

      
        <category term="study" />
      

      
        <summary type="html">내가 느낀 React Javascript 수업에서 가장 크게 변화한 부분은 index.html 파일에서 index.js 파일로 변화했다는 점이다.</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">투두리스트 Chrome Extension (3) - 학습용 스톱워치 그리고 공부시간 수정하기</title>
      <link href="https://jskim1215.github.io/project-2-3" rel="alternate" type="text/html" title="투두리스트 Chrome Extension (3) - 학습용 스톱워치 그리고 공부시간 수정하기" />
      <published>2021-08-05T10:01:06+09:00</published>
      <updated>2021-08-05T10:01:06+09:00</updated>
      <id>https://jskim1215.github.io/project-2-3</id>
      <content type="html" xml:base="https://jskim1215.github.io/project-2-3">&lt;h2 id=&quot;구현-아이디어&quot;&gt;구현 아이디어&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;start 버튼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;addEventListener&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click Event&lt;/code&gt; 발생시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;startTimer()&lt;/code&gt; 함수 실행 &lt;br /&gt;
    &lt;ul&gt;
      &lt;li&gt;이 때, 다른 버튼 비활성화&lt;/li&gt;
      &lt;li&gt;타이머의 경우, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Date.now()&lt;/code&gt;를 활용해 mileseconds 값을 Hh:Mm:Ss로 변환&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;스톱워치 중지 시, Dropdown list에 등록된 할 일 중에 하나를 선택
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;change Event&lt;/code&gt; 발생 시, 해당 option의 id를 local storage에 저장&lt;/li&gt;
      &lt;li&gt;추가 버튼 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;click Event&lt;/code&gt; 발생 시, local storage에서 id 비교 후 공부시간 수정&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;화면에서 나갈 경우
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;onbeforeunload Event&lt;/code&gt;를 통해, 나가는 시간 local storage에 저장&lt;/li&gt;
      &lt;li&gt;웹 켜졌을 경우, 현재 시간과 차이 계산해서 시간 수정 후 화면에 표시
&lt;!--break--&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;예상-구현-결과&quot;&gt;예상 구현 결과&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;공부 하는 시간 측정하는 스톱워치&lt;/li&gt;
  &lt;li&gt;등록되있는 할 일 중에 선택해서 공부시간 추가하기&lt;/li&gt;
  &lt;li&gt;화면에서 나가더라도 스톱워치 유지하기&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;rate-determining-step-걸림돌&quot;&gt;Rate-Determining Step (걸림돌)&lt;/h2&gt;
&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalUsageTimeEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Dropdown list에서 할 일을 선택하는 순간, 바로 시간이 수정되는 것이 아니라 시간 수정 버튼을 눌렀을 경우에 시간이 수정되어야 된다. 
 이 때 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dropdown list&lt;/code&gt;에서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;submit event&lt;/code&gt;가 일어났을 때 정보를 받으려고 하니 list element 전부가 받아와져서 dropdown list에서 option의 id를 가져오는 데 어려움이 있었다. &lt;br /&gt;
 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Local Storage&lt;/code&gt;에 잠깐 dropdown list element의 id를 저장했다가 submit할 때 받는 형식으로 해결해봤다.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;54&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalUsageTimeEdit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;Line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;77&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;totalUsageTimeToSeconds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timeData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nl&quot;&gt;Line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;87&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secondsToHhMmSs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;공부 시간을 기존 데이터에서 추가하는 과정에 있어서 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;String&lt;/code&gt;으로 표현된 시간을 수정하는 과정에서 전부 seconds로 바꿨다가 다시 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;string&lt;/code&gt;으로 전달하는 과정에서 코드의 실수가 꽤 잦았다.&lt;/p&gt;

&lt;h2 id=&quot;구현-코드&quot;&gt;구현 코드&lt;/h2&gt;
&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/1776b5a902e50562af45839e4f7442df.js&quot;&gt; &lt;/script&gt;</content>

      
      
      
      
      

      <author>
          <name>CodePurple</name>
        
        
      </author>

      

      
        <category term="project" />
      

      
        <summary type="html">구현 아이디어 start 버튼 addEventListener에서 click Event 발생시 startTimer() 함수 실행 이 때, 다른 버튼 비활성화 타이머의 경우, Date.now()를 활용해 mileseconds 값을 Hh:Mm:Ss로 변환 스톱워치 중지 시, Dropdown list에 등록된 할 일 중에 하나를 선택 change Event 발생 시, 해당 option의 id를 local storage에 저장 추가 버튼 click Event 발생 시, local storage에서 id 비교 후 공부시간 수정 화면에서 나갈 경우 onbeforeunload Event를 통해, 나가는 시간 local storage에 저장 웹 켜졌을 경우, 현재 시간과 차이 계산해서 시간 수정 후 화면에 표시</summary>
      

      
      
    </entry>
  
</feed>
